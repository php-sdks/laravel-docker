name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: PHP version
        required: false
        default: '8.4-fpm-alpine'
      xdebug:
        description: XDebug mode
        required: false
        default: ''
        type: choice
        options:
          - ''
          - debug
          - develop
          - coverage
          - gcstats
          - profile
          - trace

env:
  GITHUB_CR_REPO: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GITHUB_CR_REPO }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GITHUB_CR_REPO }}
          build-args: |
            TARGETPLATFORM=${{ matrix.platform }}
            PHP_TAG=${{ github.event.inputs.version }}
            XDEBUG_MODE=${{ github.event.inputs.xdebug }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker tags
        shell: bash
        run: |
          tags=${{ github.event.inputs.version }}
          if [ -n "${{ github.event.inputs.xdebug }}" ]; then
            tags="$tags-${{ github.event.inputs.xdebug }}"
          fi
          if [[ "$tags" == *"-alpine"* ]]; then
            tags=$({
              echo ${tags//-alpine/}
              echo $tags
            })
          fi
          {
            echo 'DOCKER_METADATA_TAGS<<EOF'
            echo "$tags"
            echo EOF
          } >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GITHUB_CR_REPO }}
          tags: |
            type=raw,value=${{ env.DOCKER_METADATA_TAGS }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.GITHUB_CR_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.GITHUB_CR_REPO }}:${{ steps.meta.outputs.version }}

      - name: Check image
        run: |
          docker run --rm -it ${{ env.GITHUB_CR_REPO }}:${{ steps.meta.outputs.version }} php -m
